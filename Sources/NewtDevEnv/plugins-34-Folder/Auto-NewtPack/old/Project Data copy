// NewtPack (Newt Packages) (autopart) 3.3// Copyright 1995-96 S. Weyer. All Rights Reserved Worldwideconstant kNewtPack := "NewtPack";constant kVersionNum 	:= "3.3";constant kBetaVersion 	:= "b";DefConst('kBuild20, platformVersion.platformFile = '|Newton 2.0|);DefConst('kVersionString,	kVersionNum & kBetaVersion &	(if kDebugOn then "D") &	(if kProfileOn then "P") &	(if not kIgnoreNativeKeyword then "N") &	(if kBuild20 then "-2"));DefConst('kVersion, kNewtPack && kVersionString);Print(kVersion);DefConst('pkgPad, if kBuild20 then 4 else 8);constant kCopyright   := "© 1995-96,"; // used also for dev copyrightconstant kCopyAuthor  := "S. Weyer (portions may be derived from Newtonª Toolkit © 1992-95, Apple Computer, Inc.)";DefConst('kCopyTool, kVersion && kCopyright && kCopyAuthor);constant kNewtSymbol  := '|NewtDevEnv:TKnollSys|;constant kPkgSoupName := "TEMPPKG:TKnollSys";constant kSegSize		 := 4096;constant kPlugType	 := 'protos;constant pkgSym 		 := 'protoPackage;constant progSym 		 := 'protoProgress;constant kTooBig		 := "pkgOffset too big";constant kFakeParent  := '_MyParent_;InstallScript := func(partFrame,removeFrame) // #1begin	local gData := GetGlobals().(kNewtSymbol);	if not gData	then GetGlobals().(EnsureInternal(kNewtSymbol)) :=		gData := EnsureInternal(			{constants: {}, libraries: {}, protos: {}, tools: {}, views: {}, });	gData.(kPlugType).(EnsureInternal(pkgSym))  := partFrame.partData.(pkgSym);	gData.(kPlugType).(EnsureInternal(progSym)) := partFrame.partData.(progSym);end;RemoveScript := func(removeFrame) // #2begin	local protos := GetGlobals().(kNewtSymbol).(kPlugType);	RemoveSlot(protos, pkgSym);	RemoveSlot(protos, progSym);end;partData := {}; // set protoPackage, protoProgress in afterScriptconstant kSymbolType := '|?$_Symbol_$?|;constant eArray := '[];DefConst('eFrame, {});DefConst('orda, ord($a));DefConst('ordz, ord($z));DefConst('kSymCompare, func NATIVE (h1, h2) // [hi,lo,str,sym]  // #5if h1=NIL then -1else if h2=NIL then 1else begin	local ARRAY a1 := h1, a2 := h2;	local INT hi := a1[0]-a2[0], lo;	if hi=0	then if (lo := a1[1]-a2[1])=0		then call Functions.StrCompare with(a1[2],a2[2])		else lo	else hi;	end);DefConst('kFindArray, func NATIVE (ARRAY objs, ARRAY aobj) // #6begin	local INT i, j, alen := Length(aobj);	local aclass := ClassOf(aobj), found;	local ARRAY obj1;	local kIsArray := Functions.IsArray;	for i:=0 to Length(objs)-1	do begin		obj1 := objs[i];		if alen = Length(obj1) and aclass = ClassOf(obj1)		then for j:=0 to (found := alen-1)			do if obj1[j]<>aobj[j] then break found := NIL;		if found then return i;		end;end);DefConst('kMarkObject, func(ARRAY objects, ARRAY offsets, obj, INT offset, add, pos)if addthen begin	AddArraySlot(objects, obj);	AddArraySlot(offsets, offset);	Length(offsets)-1; // for later remove	endelse begin	if pos	then begin		ArrayRemoveCount(objects,pos,1);		ArrayRemoveCount(offsets,pos,1);		end;//Print([offset,obj]);	ReplaceObject(obj, [_pkgOffset_: offset]);	end);DefConst('kSymHash, func NATIVE (data, INT offset, str, sym)begin	if not str	then str := call Functions.SPrintObject with(sym);	local INT i, ch, tot:=0;	local OrdFn := Functions.Ord;	for i:=0 to call Functions.StrLen with(str)-1	do begin		ch := call OrdFn with(str[i]);		tot := tot + if orda<=ch and ch<=ordz then ch-32 else ch;		end;	local INT lo := 0x79B9 * tot;	local INT hi := (0x9E37 * tot) + (lo >> 16);	if data	then begin		StuffWord(data, offset,   hi);		StuffWord(data, offset+2, lo);		end	else begin // assume array		local ARRAY dd := call Functions.Array with(if sym then 4 else 2, NIL);		dd[offset]   := Band(hi,0xFFFF);		dd[offset+1] := Band(lo,0xFFFF);		if sym		then begin // for sorting			dd[offset+2] := str;			dd[offset+3] := sym;			end;		dd;		end;end);DefConst('kFormInstallScript, func(partFrame) // InstallScript for a normal (part) packagebegin//Print("installing" && partFrame.app);	if Extras exists and isArray(Extras) and ArrayPos(Extras,partFrame.app,0,func(a,e) a=e.app)	then GetRoot():Notify(3,		EnsureInternal("Extras Drawer"),		"Duplicate App" && partFrame.app)	else if HasSlot(partFrame,'devInstallScript)	then begin		partFrame:devInstallScript(partFrame);		partFrame.devInstallScript := NIL;		end;	partFrame.InstallScript := NIL;//Print("end install");end);DefConst('kFormRemoveScript, func(partFrame)	partFrame:?devRemoveScript(partFrame));DefConst('kAutoInstallScript, func(partFrame)begin	local rFrame := EnsureInternal({removeScript: partFrame.devRemoveScript});	partFrame:devInstallScript(partFrame, rFrame);	rFrame;end);DefConst('kDeletionScript, func() nil);if kDebugOnthen DefConst('kArrayEqual, func (ARRAY a1, ARRAY a2)if Length(a1)=Length(a2)	and Classof(a1)=Classof(a2)then begin	local INT i;	for i := 0 to Length(a1)-1	do if a1[i] <> a2[i] then return NIL;	return TRUE;	end);if kDebugOnthen DefConst('kPrintObj, func(off,obj,len)	begin		Write(off & ": [" & len & "] "); Print(obj);	end);