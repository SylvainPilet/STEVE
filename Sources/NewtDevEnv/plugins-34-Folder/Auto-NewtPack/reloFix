DefineGlobalConstant('kVBOFlush, 20*1024);	// every 20K or so? ( < 32K?)// set this in your appyourapp.nextFlush := kVBOFlush;	// workaround for vbo flush bug? // get a pkg ref, e.g.,pkg := GetPkgRef(pkgName, store)// copy itgc();tpkg := GetDefaultStore()):NewCompressedVBO('package, Length(pkg), kTextCompander,nil);BinaryMunger(tpkg,0,nil, pkg,0,nil);// fix it:reloFix(tpkg, 0, [], 0);here's the definition for reloFix & reloFix1reloFix:func NATIVE (pkg, INT offset, ARRAY relo)begin // fix multiple parts in a package	ClearVBOCache(pkg);	// do this now	local INT partNum, partIndex, obj;	for partNum := 1 to ExtractWord(pkg,50)	// assume # parts < 65536	do begin		// first object of each part is an array with 1 element (a part frame)		partIndex := 52 + ((partNum-1) * 32);	// each part 32 bytes long		offset := (ExtractChar(pkg, partIndex+1) * 65536) + ExtractWord(pkg, partIndex+2);		// skip header,0,type(+12)		// [0] should point to next object (+4) in pkg		// keep relo in array of 4 bytes -- "long" is too big; (words messy)		if partNum=1		then begin			obj := offset+17;			relo := [				ExtractByte(pkg,offset+12),				ExtractByte(pkg,offset+13),				ExtractByte(pkg,offset+14) - (obj div 256),				ExtractByte(pkg,offset+15) - (obj mod 256),				];			end;//Print("part:" && partNum && "relo:"); Print(relo);		:reloFix1(pkg, offset, relo);		end;	ClearVBOCache(pkg);	// one last time	pkg;endreloFix1:func NATIVE (pkg, INT offset, ARRAY relo)begin // fix objects within a part	// DATA (0x40), ARRAY (0x41), FRAME (0x43)	local INT ctype := ExtractByte(pkg,offset+3);	local INT clen :=		if ctype = 0x40 // DATA		then 12 // only check type		else	ExtractByte(pkg,offset)   * 65536 +				ExtractByte(pkg,offset+1) *   256 +				ExtractByte(pkg,offset+2);	local INT i, p, obj;	for i := offset+8 to offset+clen-4 by 4	do	if ExtractByte(pkg,i)<>0 and 	// not already relocated? (assumes pkg < 17M)	  		BAND(ExtractByte(pkg, i+3), 0x3) = 1 // obj ptr?	  	then begin			obj := 0;			for p := 0 to 3			do obj := obj*256 + (ExtractByte(pkg,i+p) - relo[p]);			//Print(i & ": " & obj);			StuffLong(pkg, i, obj);			if i > nextFlush			then begin				ClearVBOCache(pkg);				nextFlush := nextFlush + kVBOFlush;				end;			obj := obj-1; 		// make ptr an offset			if obj > offset		// needs fixing only if later in package?			then :reloFix1(pkg, obj, relo, nextFlush);			end;end,